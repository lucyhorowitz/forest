#!/usr/bin/env python3

from http.server import *
import socketserver
import socket
import os
import signal
import sys
import webbrowser
import threading
import subprocess
import contextlib
import time

PORT = 8001
ROOT = f"http://localhost:{PORT}/~lucy/forest/index/index.xml"
DIR = "/Users/lucyhorowitz/Documents/GitHub.nosync/forest/"

def build_forest():
    start = time.monotonic()
    subprocess.run([DIR + '/forester', 'build', '--dev'], cwd=DIR)
    end = time.monotonic()
    print(f"Built in {end - start:.3} seconds")

def listen_for_keypress():
    while True:
        print("Press enter to rebuild forest...")
        key = sys.stdin.read(1)  # Reads one character from standard input
        if key == '\n':  # Check if the Enter key (newline character) is pressed
            build_forest()


def _get_best_family(*address):
    infos = socket.getaddrinfo(
        *address,
        type=socket.SOCK_STREAM,
        flags=socket.AI_PASSIVE,
    )
    family, type, proto, canonname, sockaddr = next(iter(infos))
    return family, sockaddr


def launch_browser():
    time.sleep(0.5)
    webbrowser.open(ROOT)

 
def serve(HandlerClass=BaseHTTPRequestHandler,
         ServerClass=ThreadingHTTPServer,
         protocol="HTTP/1.0", port=8000, bind=None):
    """Test the HTTP request handler class.

    This runs an HTTP server on port 8000 (or the port argument).

    """
    ServerClass.address_family, addr = _get_best_family(bind, port)
    HandlerClass.protocol_version = protocol
    with ServerClass(addr, HandlerClass) as httpd:
        host, port = httpd.socket.getsockname()[:2]
        url_host = f'[{host}]' if ':' in host else host
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nKeyboard interrupt received, exiting.")
            sys.exit(0)


if __name__ == '__main__':
    # Start the listening thread

    dir =  DIR + '/output'
    print("initial build...")
    build_forest()
    print("forest available at: {ROOT}".format(ROOT=ROOT))
    print("opening web browser")

    listener_thread = threading.Thread(target=listen_for_keypress, daemon=True)
    listener_thread.start()

    webbrowser_thread = threading.Thread(target=launch_browser)
    webbrowser_thread.start()

    class DualStackServer(ThreadingHTTPServer):

        def server_bind(self):
            # suppress exception when protocol is IPv4
            with contextlib.suppress(Exception):
                self.socket.setsockopt(
                    socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 0)
            bind_result = super().server_bind()
            return bind_result

        def finish_request(self, request, client_address):
            self.RequestHandlerClass(request, client_address, self,
                                     directory=dir)
    
    serve(
       HandlerClass = SimpleHTTPRequestHandler,
       ServerClass = DualStackServer,
       port = PORT,
    )